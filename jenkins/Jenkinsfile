pipeline {
    agent any

    stages {
		stage('Clone repository') {
            steps{
                git branch: '$BRANCH_NAME',
                    url: 'https://github.com/dobarden/epam24-diploma.git'
                }
        }

        stage('Build docker image') {
            steps{
                dir('swapp') {
                    sh 'docker build -t dobarden/swapp-$BRANCH_NAME:0.$BUILD_NUMBER .'
                }
            }
        }
        stage('Push docker image to DockerHub') {
            steps{
                withDockerRegistry(credentialsId: 'cred-docker-hub', url: 'https://index.docker.io/v1/') {
                    sh '''
                        docker push dobarden/swapp-$BRANCH_NAME:0.$BUILD_NUMBER
                    '''
                }
            }
        }
        stage('Delete docker image locally') {
            steps{
                sh 'docker rmi dobarden/swapp-$BRANCH_NAME:0.$BUILD_NUMBER'
            }
        }
        stage('Add values') {
            environment {
                rds_db_host = credentials("rds_${env.BRANCH_NAME}_dbhost")
                rds_dbname = credentials("rds_${env.BRANCH_NAME}_dbname")
                rds_user_pass = credentials("rds_${env.BRANCH_NAME}_user_pass")
	        }
            steps {
                dir('jenkins/deploy') {
                    sh '''
                        sed "s/"${BRANCH_NAME}_latest_image"/0.$BUILD_NUMBER/; s/"${BRANCH_NAME}_db_host"/$rds_db_host/; \
                        s/"${BRANCH_NAME}_db_user"/$rds_user_pass_USR/; s/"${BRANCH_NAME}_db_pass"/$rds_user_pass_PSW/; \
                        s/"${BRANCH_NAME}_db_name"/$rds_dbname/" -i deploy-autoscale-$BRANCH_NAME.yaml
                    '''
					sh "cat deploy-autoscale-${env.BRANCH_NAME}.yaml"
                }
            }
        }

        stage('Deploy swapp') {
            steps {
                dir('jenkins/deploy') {
                    sh "kubectl apply -f deploy-autoscale-${env.BRANCH_NAME}.yaml --namespace=${env.BRANCH_NAME}"
                    sh "kubectl get svc --namespace=${env.BRANCH_NAME}"
                }
            }
        }
        stage('Delete workspace after build') {
            steps {
                echo 'Deleting workspace'
                deleteDir()
            }
        }
    }

}