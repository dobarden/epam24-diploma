pipeline {
    agent any
	
	environment {
        ENV_BRNAME = "${env.BRANCH_NAME == "main" ? "prod" : "dev"}"
		ENV_URL = "${env.BRANCH_NAME == "main" ? "https://sw24.ru/" : "https://dev.sw24.ru/"}"
    }
	
    stages {
		stage('Clone repository') {
            steps{
                git branch: "${env.BRANCH_NAME}",
                    url: 'https://github.com/dobarden/epam24-diploma.git'
                }
        }

        stage('Build docker image') {
            steps{
                dir('swapp') {
                    sh 'docker build -t dobarden/swapp-$ENV_BRNAME:0.$BUILD_NUMBER .'
                }
            }
        }
        stage('Push docker image to DockerHub') {
            steps{
                withDockerRegistry(credentialsId: 'cred-docker-hub', url: 'https://index.docker.io/v1/') {
                    sh '''
                        docker push dobarden/swapp-$ENV_BRNAME:0.$BUILD_NUMBER
                    '''
                }
            }
        }
        stage('Delete docker image locally') {
            steps{
                sh 'docker rmi dobarden/swapp-$ENV_BRNAME:0.$BUILD_NUMBER'
            }
        }		
        stage('Add values') {
            environment {
                rds_db_host = credentials("rds_${ENV_BRNAME}_dbhost")
                rds_dbname = credentials("rds_${ENV_BRNAME}_dbname")
                rds_user_pass = credentials("rds_${ENV_BRNAME}_user_pass")
	        }
            steps {
                dir('jenkins/deploy') {
                    sh '''
                        sed "s/"${ENV_BRNAME}_latest_image"/0.$BUILD_NUMBER/; s/"${ENV_BRNAME}_db_host"/$rds_db_host/; \
                        s/"${ENV_BRNAME}_db_user"/$rds_user_pass_USR/; s/"${ENV_BRNAME}_db_pass"/$rds_user_pass_PSW/; \
                        s/"${ENV_BRNAME}_db_name"/$rds_dbname/" -i deploy-autoscale-${ENV_BRNAME}.yaml
                    '''
                }
            }
        }
        stage('Deploy swapp') {
            steps {
                dir('jenkins/deploy') {
                    sh 'kubectl apply -f deploy-autoscale-$ENV_BRNAME.yaml --namespace=$ENV_BRNAME'
                    sh 'kubectl get svc --namespace=$ENV_BRNAME'
                }
            }
        }		
		stage('Apply ingress') {
            steps {
                dir('ingress') {
                    sh 'kubectl apply -f swapp-$ENV_BRNAME-ingress.yaml'
                }
            }
        }	
        stage('HTTP request') {
            steps {
                httpRequest "${ENV_URL}"
           }
        }		
        stage('Delete workspace after build') {
            steps {
                echo 'Deleting workspace'
                deleteDir()
            }
        }
    }

}